// Seonghyun Kim

v_init = 0

load_file("nrngui.hoc")
load_file("ballCell.hoc")
load_file("modeling.hoc")

cvode_active(0)

proc init(){
	finitialize()
	if (cvode.active()) {
		cvode.re_init()
	} else {
		fcurrent()
	}
	frecord_init()
}



objref corpus_file

corpus_file = new File()
corpus_file.ropen("../data/preprocessed_corpus.txt")

corpus_sent_num  = 0
corpus_char_num = 0

strdef current_sent
objref strobj
strobj = new StringFunctions()
while(!corpus_file.eof()){
    corpus_file.gets(current_sent)
	corpus_sent_num += 1
    corpus_char_num += strobj.len(current_sent)
}
print(corpus_char_num)
tstop = simulation_time
objref sentences[corpus_sent_num]
for(i = 0; i < corpus_sent_num; i += 1){
    sentences[i] = new Vector()
}

corpus_file.ropen("../data/preprocessed_corpus.txt")
sent_idx = 0
data_idx = 0

while(!corpus_file.eof()){
    ch = corpus_file.scanvar()
    sentences[sent_idx].insrt(sentences[sent_idx].size(), ch)
    if(ch == 0){
        sent_idx += 1
        data_idx = 0
    } else{
        data_idx = 0
    }
}
corpus_file.close()

current_word_num = 0
current_sent_num = 0

change_flag = 0

proc advance(){
    fadvance()
    dt = 0.1    // 0.1 ms

    //initializing
    if(corpus_sent_num == current_sent_num){
        break
    }

    for(i = 0; i < n_input_neuron; i += 1){
        if(input_neuron_stim[i].amp > 0){
            input_neuron_stim[i].amp = 0
        }
        if(output_neuron_stim[i].amp > 0){
            output_neuron_stim[i].amp = 0
        }
    }

    current_word_id = sentences[current_sent_num].x(current_word_num) - 1
    next_word_id = sentences[current_sent_num].x(current_word_num + 1) - 1

    input_neuron_stim[int(current_word_id)].amp = 0.1
    output_neuron_stim[int(next_word_id)].amp = 0.1


    if(int(t-0.025)% 300 == 0){
        if(change_flag == 0){
            current_word_num += 1
            change_flag = 1
            print current_word_id, "/", next_word_id 
        }
    } else {
        change_flag = 0
    }

    current_sent_len = sentences[current_sent_num].size()
   
    
    if(current_sent_len - 2 == current_word_num){
        current_sent_num += 1
        current_word_num = 0
        print "next sent"
    }     
}


proc runc(){
	print "Run!"
	run()
	print "real_time: " , realtime
	print "finish!"
}

objref b, c
b = new VBox()
b.intercept(1)


objref grp1, grp2, grp3, grp4, grp5, grp6, grp7, grp8


//grp1 = new Graph()
//grp1.addexpr("input_neuron[0].soma.v(0.5)")
//grp1.size(0,tstop, -100, 100)
//graphList[0].append(grp1)

//grp2 = new Graph()
//grp2.addexpr("input_neuron[1].soma.v(0.5)")
//grp2.size(0,tstop, -100, 100)
//graphList[0].append(grp2)

grp3 = new Graph()
grp3.addexpr("hidden_neuron[0].soma.v(0.5)")
grp3.size(0,tstop, -100, 100)
graphList[0].append(grp3)

grp4 = new Graph()
grp4.addexpr("hidden_neuron[1].soma.v(0.5)")
grp4.size(0,tstop, -100, 100)
graphList[0].append(grp4)

//grp7 = new Graph()
//grp7.addexpr("output_neuron[0].soma.v(0.5)")
//grp7.size(0,tstop, -100, 100)
//graphList[0].append(grp7)

//grp8 = new Graph()
//grp8.addexpr("output_neuron[1].soma.v(0.5)")
//grp8.size(0,tstop, -100, 100)
//graphList[0].append(grp8)

c = new HBox()
c.intercept(1)
xpanel("",1)
xbutton("Run Simulation", "runc()")
xbutton("Quit", "quit()")
xpanel()
c.intercept(0)
c.map()
b.intercept(0)
b.map()
